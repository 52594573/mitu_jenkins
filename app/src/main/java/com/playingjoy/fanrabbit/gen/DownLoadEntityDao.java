package com.playingjoy.fanrabbit.gen;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.playingjoy.fanrabbit.domain.entity.DownLoadEntity;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "DOWN_LOAD_ENTITY".
*/
public class DownLoadEntityDao extends AbstractDao<DownLoadEntity, Long> {

    public static final String TABLENAME = "DOWN_LOAD_ENTITY";

    /**
     * Properties of entity DownLoadEntity.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property DownloadId = new Property(1, int.class, "downloadId", false, "downloadId");
        public final static Property ApkName = new Property(2, String.class, "apkName", false, "apkName");
        public final static Property CachePath = new Property(3, String.class, "cachePath", false, "cachePath");
        public final static Property DownLoadProgress = new Property(4, Long.class, "downLoadProgress", false, "downLoadProgress");
        public final static Property DownloadTotalSize = new Property(5, Long.class, "downloadTotalSize", false, "downloadTotalSize");
    }


    public DownLoadEntityDao(DaoConfig config) {
        super(config);
    }
    
    public DownLoadEntityDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"DOWN_LOAD_ENTITY\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"downloadId\" INTEGER NOT NULL ," + // 1: downloadId
                "\"apkName\" TEXT," + // 2: apkName
                "\"cachePath\" TEXT," + // 3: cachePath
                "\"downLoadProgress\" INTEGER," + // 4: downLoadProgress
                "\"downloadTotalSize\" INTEGER);"); // 5: downloadTotalSize
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"DOWN_LOAD_ENTITY\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, DownLoadEntity entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getDownloadId());
 
        String apkName = entity.getApkName();
        if (apkName != null) {
            stmt.bindString(3, apkName);
        }
 
        String cachePath = entity.getCachePath();
        if (cachePath != null) {
            stmt.bindString(4, cachePath);
        }
 
        Long downLoadProgress = entity.getDownLoadProgress();
        if (downLoadProgress != null) {
            stmt.bindLong(5, downLoadProgress);
        }
 
        Long downloadTotalSize = entity.getDownloadTotalSize();
        if (downloadTotalSize != null) {
            stmt.bindLong(6, downloadTotalSize);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, DownLoadEntity entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getDownloadId());
 
        String apkName = entity.getApkName();
        if (apkName != null) {
            stmt.bindString(3, apkName);
        }
 
        String cachePath = entity.getCachePath();
        if (cachePath != null) {
            stmt.bindString(4, cachePath);
        }
 
        Long downLoadProgress = entity.getDownLoadProgress();
        if (downLoadProgress != null) {
            stmt.bindLong(5, downLoadProgress);
        }
 
        Long downloadTotalSize = entity.getDownloadTotalSize();
        if (downloadTotalSize != null) {
            stmt.bindLong(6, downloadTotalSize);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public DownLoadEntity readEntity(Cursor cursor, int offset) {
        DownLoadEntity entity = new DownLoadEntity( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getInt(offset + 1), // downloadId
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // apkName
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // cachePath
            cursor.isNull(offset + 4) ? null : cursor.getLong(offset + 4), // downLoadProgress
            cursor.isNull(offset + 5) ? null : cursor.getLong(offset + 5) // downloadTotalSize
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, DownLoadEntity entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setDownloadId(cursor.getInt(offset + 1));
        entity.setApkName(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setCachePath(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setDownLoadProgress(cursor.isNull(offset + 4) ? null : cursor.getLong(offset + 4));
        entity.setDownloadTotalSize(cursor.isNull(offset + 5) ? null : cursor.getLong(offset + 5));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(DownLoadEntity entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(DownLoadEntity entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(DownLoadEntity entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
